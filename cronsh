#!/bin/bash


# Set variable defaults
CRONSH_NEW_INSTANCE_POLICY=allow-concurrent
CRONSH_MAX_CONCURRENT_INSTANCES=0
CRONSH_INSTANCE_QUEUE_SIZE=0
CRONSH_ATTEMPTS_MAX=1
CRONSH_ATTEMPTS_TIMEOUT=0
CRONSH_ATTEMPTS_DEADLINE_DATESTR=''
CRONSH_ATTEMPTS_INTERVAL=0
CRONSH_PRECHECK_INTERVAL=5sec
CRONSH_JOB_TIMEOUT=0
CRONSH_JOB_DEADLINE_DATESTR=''
CRONSH_INSTANCE_RANDOM_DELAY_ATLEAST=0
CRONSH_INSTANCE_RANDOM_DELAY_ATMOST=0
CRONSH_ATTEMPTS_RANDOM_DELAY_ATLEAST=0
CRONSH_ATTEMPTS_RANDOM_DELAY_ATMOST=0
CRONSH_ENABLE=yes
CRONSH_NICE=19
CRONSH_IONICE_CLASS=idle
CRONSH_IONICE_CLASSDATA=''
CRONSH_CAUGHT_SIGNAL=no
CRONSH_STOP_REASON=''
CRONSH_DISABLE_ON_FAIL=no
CRONSH_MIN_COOLDOWN=0
CRONSH_MIN_COOLDOWN_SUCCESS=0
CRONSH_MIN_COOLDOWN_FAILED=0
CRONSH_KEEPT=maybe
CRONSH_READ_CONFIG=yes
CRONSH_SHELL_MODE=no


# Define subroutines

set -e
for libdir in "$(dirname "`readlink -f "$0"`")" /usr/lib/cronsh /usr/share/cronsh ""
do
	if [ -z "$libdir" ]
	then
		echo "cronsh: can not source cronsh-common" >&2
		false
	fi
	if [ -e "$libdir/cronsh-common" ]
	then
		. "$libdir/cronsh-common"
		break
	fi
done
unset libdir
set +e

exit_cronsh()
{
	write_instance_history
	
	[ ! -e post-instance ] || . post-instance
	
	if [ -n "$CRONSH_LAST_STATUS" -a "$CRONSH_LAST_STATUS" != 0 -a "$CRONSH_DISABLE_ON_FAIL" = yes ]
	then
		note "Disabling Job ..."
		[ -d "$CRONSH_JOBDIR_ABS/config.d" ] || mkdir "$CRONSH_JOBDIR_ABS/config.d"
		{
			echo "# disabled due to a failure in job instance"
			echo "# started at $(date -d @$CRONSH_INSTANCE_START_TIMESTAMP_NS +"$human_date_fmt_min") @$CRONSH_INSTANCE_START_TIMESTAMP_NS"
			echo "# exit code $CRONSH_LAST_STATUS"
			echo "CRONSH_ENABLE=no"
		}>"$CRONSH_JOBDIR_ABS/config.d/99-disable"
	fi
	
	CRONSH_INSTANCE_END_TIMESTAMP_NS=`date +%s.%N`
	CRONSH_INSTANCE_END_TIMESTAMP=${CRONSH_INSTANCE_END_TIMESTAMP_NS%.*}
	mk_timestamp_file "$CRONSH_INSTANCE_WORKDIR_ABS/end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	ln -sfn "$CRONSH_INSTANCE_CANONICAL_DIR" "$CRONSH_WORKDIR_BASE/most-recent-ended"
	
	if [ "$CRONSH_LAST_STATUS" != 0 ]
	then
		ln -sfn "$CRONSH_INSTANCE_CANONICAL_DIR" "$CRONSH_WORKDIR_BASE/most-recent-failure"
		[ ! -e on-failure ] || ./on-failure
	else
		ln -sfn "$CRONSH_INSTANCE_CANONICAL_DIR" "$CRONSH_WORKDIR_BASE/most-recent-success"
		[ ! -e on-success ] || ./on-success
	fi
	
	if [ -n "$CRONSH_KEEPT_SOCKET_TMP" ]
	then
		rm "$CRONSH_INSTANCE_WORKDIR_ABS/console"
	fi
	
	exit ${CRONSH_LAST_STATUS:-255}
}
check_timeout()
{
	local now=`date +%s`
	if [ $CRONSH_ATTEMPTS_TIMEOUT != 0 -a $[now - CRONSH_INSTANCE_START_TIMESTAMP] -gt $CRONSH_ATTEMPTS_TIMEOUT ]
	then
		CRONSH_STOP_REASON=attempt-timeout
		note "attempting is timed out at attempt $CRONSH_ATTEMPT_NUMBER ($CRONSH_ATTEMPTS_TIMEOUT sec)"
		exit_cronsh
	fi
}
check_deadline()
{
	local now=`date +%s`
	if [ $CRONSH_ATTEMPTS_DEADLINE != 0 -a $now -gt $CRONSH_ATTEMPTS_DEADLINE ]
	then
		CRONSH_STOP_REASON=attempt-deadline
		note "reached deadline ($(date +"%F %T" -d @$CRONSH_ATTEMPTS_DEADLINE)) at attempt $CRONSH_ATTEMPT_NUMBER"
		exit_cronsh
	fi
}
check_signal()
{
	if [ $CRONSH_CAUGHT_SIGNAL = yes ]
	then
		exit_cronsh
	fi
}
random_range()
{
	echo $[RANDOM % ($2 + 1 - $1) + $1]
}
delay()
{
	local t=$1
	shift
	[ "$t" != 0 ] || return
	note "delay $t: $*"
	sleep "$t" {CRONSH_LOCK_FD}>&- {CRONSH_INSTANCE_LOCK_FD}>&-
}

cronsh_signal()
{
	CRONSH_CAUGHT_SIGNAL=yes
	CRONSH_STOP_REASON=$1
	
	if [ -n "$CRONSH_ATTEMPT_PID" ]
	then
		note "Terminating Job ($CRONSH_ATTEMPT_PID) ..."
		kill -s TERM $CRONSH_ATTEMPT_PID
	else
		if [ -n "$CRONSH_ATTEMPT_PGID" -a $1 = interrupt ]
		then
			note "Terminating Job Process Group ($CRONSH_ATTEMPT_PGID) ..."
			kill -s TERM -- -$CRONSH_ATTEMPT_PGID
		fi
	fi
}

set_cronsh_option()
{
	declare -g -A config_override
	local varname=$1
	local value=$2
	
	if [ "${varname:0:${#cronsh_varnameprefix}}" != "$cronsh_varnameprefix" -o "${!varname+x}" != 'x' ]
	then
		echo "cronsh: invalid config variable: $varname" >&2
		set -e
		false
	fi
	case "$varname" in
	CRONSH_JOBDIR|CRONSH_WORKDIR_BASE|CRONSH_SHELL_MODE)
		true;;
	CRONSH_READ_CONFIG)
		eval "$varname=\$value";;
	*)	config_override[$varname]=$value;;
	esac
}



if [ "$1" = -c ]
then
	CRONSH_SHELL_MODE=yes
	CRONSH_EXECUTION_STRING=$2
	# Parse the left portion of shell command line string to find cronsh variable assignments
	# NOTE: this is not a robust shell lexer, just a weak imitation, only a limited syntax is 
	# supported: inner quotes are not allowed, no dollar-expansion, only 3 kind of tokens are supported:
	#  - CRONSH_VAR=unquoted_string
	#  - CRONSH_VAR="quoted string"
	#  - CRONSH_VAR='quoted string'
	while [[ $CRONSH_EXECUTION_STRING =~ ^([ ]*)($cronsh_varnameprefix[A-Z0-9_]+)=([^\"\' ]+|\"([^\"]*)\"|\'([^\']*)\')([ ]) ]]
	do
		CRONSH_EXECUTION_STRING=${CRONSH_EXECUTION_STRING:${#BASH_REMATCH[0]}}
		varname=${BASH_REMATCH[2]}
		case "${BASH_REMATCH[3]:0:1}" in
		\")	value=${BASH_REMATCH[4]};;
		\')	value=${BASH_REMATCH[5]};;
		*)	value=${BASH_REMATCH[3]};;
		esac
		set_cronsh_option "$varname" "$value"
		unset varname value
	done
else
	# Read config variables passed by CLI arguments
	# TODO: get config from environment? (maybe unwanted when cronsh calls an other cronsh job)
	# NOTE: if some CRONSH_* var has been got from environment, then it may not be reported as invalid
	# NOTE: incompatible with bash 'set -k'
	while true
	do
		case "$1" in
		"$cronsh_varnameprefix"?*=*)
			set_cronsh_option "${1%%=*}" "${1#*=}"
			;;
		*)
			break
			;;
		esac
		shift
	done
fi

# Set shell options
set -e
set -u
enable kill
shopt -s nullglob
if [ "$1" = -e ]
then
	# Execution string given not like it'd given to a shell, but by '-e' option
	CRONSH_SHELL_MODE=yes
	CRONSH_EXECUTION_STRING=$2
fi
if [ $CRONSH_SHELL_MODE = yes ]
then
	# Run ad-hoc shell command
	# Store job data in local directory reflecting the command line
	CRONSH_JOBDIR=~/.local/share/cronsh/ad-hoc/${CRONSH_EXECUTION_STRING//\//⁄}
	
	# Create Jobdir for ad-hoc command
	if [ ! -d "$CRONSH_JOBDIR" ]
	then
		note "Creating Job Directory for ad-hoc command: $CRONSH_JOBDIR"
		mkdir -p "$CRONSH_JOBDIR"
	fi
else
	# Run job from cronsh directory
	CRONSH_JOBDIR=$1
fi


# Load the job's saved configuration
if [ "$CRONSH_READ_CONFIG" = yes ]
then
	saved_CRONSH_JOBDIR=$CRONSH_JOBDIR
	saved_CRONSH_EXECUTION_STRING=$CRONSH_EXECUTION_STRING
	
	[ ! -e "$CRONSH_JOBDIR"/config ] || . "$CRONSH_JOBDIR"/config
	for cfgfile in "$CRONSH_JOBDIR"/config.d/*
	do
		. "$cfgfile"
	done
	unset cfgfile
	
	CRONSH_JOBDIR=$saved_CRONSH_JOBDIR
	CRONSH_EXECUTION_STRING=$saved_CRONSH_EXECUTION_STRING
fi
set +u

# Override config variables with ones passed in CLI args
for varname in "${!config_override[@]}"
do
	eval "$varname=\${config_override[$varname]}"
done
unset varname config_override

# Call ourself in under 'keept'
if [ -z "$CRONSH_KEEPT_SOCKET_TMP" ]
then
	if [ "$CRONSH_KEEPT" = must ] && ! type keept >/dev/null
	then
		die
	fi
	if [ "$CRONSH_KEEPT" = maybe -o "$CRONSH_KEEPT" = must ] && type keept >/dev/null 2>&1
	then
		# Generate list of all CRONSH_* variable to pass to re-invoked cronsh
		all_params=()
		for varname in `compgen -v -X "!$cronsh_varnameprefix*"`
		do
			case "$varname" in
			CRONSH_JOBDIR|CRONSH_WORKDIR_BASE|CRONSH_EXECUTION_STRING)
				# don't pass it to our reincarnation
				true;;
			*)
				all_params+=("$varname=${!varname}");;
			esac
		done
		# Cronsh invoke itself within keept
		CRONSH_KEEPT_SOCKET_TMP=$CRONSH_JOBDIR/.console.$RANDOM
		export CRONSH_KEEPT_SOCKET_TMP
		export KEEPT_SUPPRESS_NORMAL_EXIT_MESSAGE=1
		if [ $CRONSH_SHELL_MODE = yes ]
		then
			all_params+=(-e "$CRONSH_EXECUTION_STRING")
		else
			all_params+=("$@")
		fi
		exec keept bmtu "$CRONSH_KEEPT_SOCKET_TMP" "$BASH" "$0" CRONSH_READ_CONFIG=no "${all_params[@]}"
	fi
fi


CRONSH_JOBDIR_ABS=`mk_abs_path "$CRONSH_JOBDIR"`
cd "$CRONSH_JOBDIR"
# Open file descriptor to lock later on
exec {CRONSH_LOCK_FD}>>lock
set +e




if [ $CRONSH_ENABLE != yes ]
then
	die "Job is disabled."
fi


# Check cooldown parameters
now=`date +%s`
last_instance_end=`get_timestamp_sec_or_zero "$CRONSH_JOBDIR_ABS/latest-instance-end"`
last_successful_instance_end=`get_timestamp_sec_or_zero "$CRONSH_JOBDIR_ABS/latest-successful-instance-end"`
last_unsuccessful_instance_end=`get_timestamp_sec_or_zero "$CRONSH_JOBDIR_ABS/latest-unsuccessful-instance-end"`
CRONSH_MIN_COOLDOWN=`to_sec "$CRONSH_MIN_COOLDOWN"`
CRONSH_MIN_COOLDOWN_SUCCESS=`to_sec "$CRONSH_MIN_COOLDOWN_SUCCESS"`
CRONSH_MIN_COOLDOWN_FAILED=`to_sec "$CRONSH_MIN_COOLDOWN_FAILED"`
can_run_soonest_ts=0
can_run_soonest_atall=$[last_instance_end + CRONSH_MIN_COOLDOWN]
can_run_soonest_bysuccess=$[last_successful_instance_end + CRONSH_MIN_COOLDOWN_SUCCESS]
can_run_soonest_byfailed=$[last_unsuccessful_instance_end + CRONSH_MIN_COOLDOWN_FAILED]
if [ $now -lt $can_run_soonest_atall ]
then
	can_run_soonest_ts=$can_run_soonest_atall
	last_run_ts=$last_instance_end
	k=''
fi
if [ $now -lt $can_run_soonest_bysuccess ]
then
	if [ $can_run_soonest_ts -lt $can_run_soonest_bysuccess ]
	then
		can_run_soonest_ts=$can_run_soonest_bysuccess
		last_run_ts=$last_successful_instance_end
		k="successful"
	fi
fi
if [ $now -lt $can_run_soonest_byfailed ]
then
	if [ $can_run_soonest_ts -lt $can_run_soonest_byfailed ]
	then
		can_run_soonest_ts=$can_run_soonest_byfailed
		last_run_ts=$last_unsuccessful_instance_end
		k="unsuccessful"
	fi
fi
if [ $can_run_soonest_ts != 0 ]
then
	last_dt=`date -d@$last_run_ts`
	next_dt=`date -d@$can_run_soonest_ts`
	die "Last ${k:+$k }job was run $last_dt, next can run not earlier than $next_dt."
fi


# Acquire Lock
msg_no_lock_ex="Can not acquire exclusive lock"
msg_no_lock_sh="Can not acquire shared lock"
msg_lock_acq="Lock acquired"

case "$CRONSH_NEW_INSTANCE_POLICY" in
allow-concurrent)
	if [ $CRONSH_MAX_CONCURRENT_INSTANCES != 0 ]
	then
		locks=`count_locks_on_file "$CRONSH_JOBDIR_ABS/lock"` || die
		if [ $locks -ge $CRONSH_MAX_CONCURRENT_INSTANCES ]
		then
			die "Too many concurrent Jobs are running ($locks, max: $CRONSH_MAX_CONCURRENT_INSTANCES)"
		fi
	fi
	flock --shared --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_sh"
	;;
deny-new)
	flock --exclusive --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_ex"
	# TODO: info about already running instance
	;;
queue-new)
	if [ $CRONSH_INSTANCE_QUEUE_SIZE != 0 ]
	then
		pendlocks=`count_pending_locks_on_file "$CRONSH_JOBDIR_ABS/lock"` || die
		if [ $pendlocks -ge $CRONSH_INSTANCE_QUEUE_SIZE ]
		then
			die "Queue is full ($pendlocks pending items, max: $CRONSH_INSTANCE_QUEUE_SIZE)"
		fi
	fi
	
	trap 'note "Termination requested"; [ -n "$flock_pid" ] && kill $flock_pid; exit 1' INT TERM
	note "Waiting in queue"
	
	flock --exclusive $CRONSH_LOCK_FD &
	flock_pid=$!
	wait_status $flock_pid || die "$msg_no_lock_ex"
	
	note "$msg_lock_acq"
	trap - INT TERM
	;;
stop-old)
	job_terminator_pid=''
	trap 'note "Termination requested"; [ -n "$job_terminator_pid" ] && kill $job_terminator_pid; exit 1' INT TERM
	
	CRONSH_STOPOLD_LOCKFILE=`get_stopold_lockfile_name`
	exec {CRONSH_STOPOLD_LOCK_FD}>>"$CRONSH_STOPOLD_LOCKFILE" || die "Failed to open lockfile: $CRONSH_STOPOLD_LOCKFILE"
	
	if ! flock --exclusive --nonblock $CRONSH_STOPOLD_LOCK_FD
	then
		# stop other job instance which in in "lock acquisition" phase just like us now
		note "Stopping old Job Instnce in initialization phase"
		kill `cat "$CRONSH_STOPOLD_LOCKFILE"`
	fi
	
	note "Grabbing auxiliary lock"
	flock --exclusive $CRONSH_STOPOLD_LOCK_FD || die "$msg_no_lock_ex"
	echo $$ >"$CRONSH_STOPOLD_LOCKFILE"
	
	note "Stopping old running Job Instnces if any"
	cronshctl stop "$CRONSH_JOBDIR_ABS" &
	job_terminator_pid=$!
	
	wait_status $job_terminator_pid
	
	flock --exclusive --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_ex"
	note "$msg_lock_acq"
	
	flock --unlock $CRONSH_STOPOLD_LOCK_FD
	trap - INT TERM
	;;
*)
	die "Bad config: CRONSH_NEW_INSTANCE_POLICY=$CRONSH_NEW_INSTANCE_POLICY"
	;;
esac


# Generate instance unique variables
CRONSH_INSTANCE_START_TIMESTAMP_NS=`date +%s.%N`
CRONSH_INSTANCE_START_TIMESTAMP=${CRONSH_INSTANCE_START_TIMESTAMP_NS%.*}
CRONSH_INSTANCE_END_TIMESTAMP_NS=''
CRONSH_INSTANCE_END_TIMESTAMP=''
CRONSH_INSTANCE_CANONICAL_DIR=`get_instance_relative_canonical_dir $CRONSH_INSTANCE_START_TIMESTAMP_NS`
CRONSH_INSTANCE_WORKDIR=$CRONSH_WORKDIR_BASE/$CRONSH_INSTANCE_CANONICAL_DIR
CRONSH_INSTANCE_WORKDIR_ABS=`mk_abs_path "$CRONSH_INSTANCE_WORKDIR"`
CRONSH_ATTEMPTS_BASEDIR=$CRONSH_INSTANCE_WORKDIR

# Save Job Instance's PID and setup logging
set -e
mkdir -p "$CRONSH_INSTANCE_WORKDIR"
ln -sfn "$CRONSH_INSTANCE_CANONICAL_DIR" "$CRONSH_WORKDIR_BASE/most-recent-started"
echo -n $$ >"$CRONSH_INSTANCE_WORKDIR/pid"
exec {CRONSH_INSTANCE_LOCK_FD}>>"$CRONSH_INSTANCE_WORKDIR/pid"
flock --exclusive --nonblock $CRONSH_INSTANCE_LOCK_FD
if [ -n "$KEEPT_SOCKARG" ]
then
	mv "$KEEPT_SOCKARG" "$CRONSH_INSTANCE_WORKDIR"/console
fi
exec {stdout_copy}>&1
exec {stderr_copy}>&2
exec 1> >(exec tee "$CRONSH_INSTANCE_WORKDIR/stdout.txt" >&1)
exec 2> >(exec tee "$CRONSH_INSTANCE_WORKDIR/stderr.txt" >&2)
register_instance_start "$CRONSH_INSTANCE_START_TIMESTAMP_NS" "$CRONSH_INSTANCE_CANONICAL_DIR"
set +e


# Set other computed variables
CRONSH_ATTEMPTS_DEADLINE=0
[ -z "$CRONSH_ATTEMPTS_DEADLINE_DATESTR" ] || CRONSH_ATTEMPTS_DEADLINE=`date +%s -d "$CRONSH_ATTEMPTS_DEADLINE_DATESTR"`
CRONSH_LAST_STATUS=''
CRONSH_ATTEMPTS_TIMEOUT=`to_sec $CRONSH_ATTEMPTS_TIMEOUT`
CRONSH_ATTEMPTS_INTERVAL=`to_nsec $CRONSH_ATTEMPTS_INTERVAL`
CRONSH_PRECHECK_INTERVAL=`to_nsec $CRONSH_PRECHECK_INTERVAL`
CRONSH_ATTEMPT_NUMBER=0
CRONSH_JOB_DEADLINE=0
[ -z "$CRONSH_JOB_DEADLINE_DATESTR" ] || CRONSH_JOB_DEADLINE=`date +%s -d "$CRONSH_JOB_DEADLINE_DATESTR"`
CRONSH_JOB_TIMEOUT=`to_sec $CRONSH_JOB_TIMEOUT`
CRONSH_INSTANCE_RANDOM_DELAY_ATLEAST=`to_sec $CRONSH_INSTANCE_RANDOM_DELAY_ATLEAST`
CRONSH_INSTANCE_RANDOM_DELAY_ATMOST=`to_sec $CRONSH_INSTANCE_RANDOM_DELAY_ATMOST`
CRONSH_ATTEMPTS_RANDOM_DELAY_ATLEAST=`to_sec $CRONSH_ATTEMPTS_RANDOM_DELAY_ATLEAST`
CRONSH_ATTEMPTS_RANDOM_DELAY_ATMOST=`to_sec $CRONSH_ATTEMPTS_RANDOM_DELAY_ATMOST`
if ! [ "$CRONSH_IONICE_CLASS" -ge 0 ] 2>/dev/null
then
	case "$CRONSH_IONICE_CLASS" in
	none) CRONSH_IONICE_CLASS=0;;
	realtime) CRONSH_IONICE_CLASS=1;;
	best-effort) CRONSH_IONICE_CLASS=2;;
	idle) CRONSH_IONICE_CLASS=3;;
	esac
fi


# Expose instance specific variables
export CRONSH_JOBDIR_ABS
export CRONSH_INSTANCE_START_TIMESTAMP_NS
export CRONSH_INSTANCE_START_TIMESTAMP
export CRONSH_INSTANCE_END_TIMESTAMP_NS
export CRONSH_INSTANCE_END_TIMESTAMP
export CRONSH_ATTEMPT_NUMBER
export CRONSH_LAST_STATUS


# Setup signal handlers
trap 'cronsh_signal terminate' TERM
trap 'cronsh_signal interrupt' INT



# Start the Job

delay `random_range $CRONSH_INSTANCE_RANDOM_DELAY_ATLEAST $CRONSH_INSTANCE_RANDOM_DELAY_ATMOST` random delay before starting job

mkdir -p "$CRONSH_JOBDIR_ABS/$CRONSH_WORKDIR_BASE/persist"

[ ! -e pre-instance ] || . pre-instance


while true
do
	if [ -d "$CRONSH_JOBDIR_ABS"/condition ]
	then
		run-parts --exit-on-error "$CRONSH_JOBDIR_ABS"/condition
		preconditions_err=$?
	else
		preconditions_err=''
	fi
	
	check_signal
	check_timeout
	check_deadline
	
	if [ "$preconditions_err" = 0 -o "$preconditions_err" = '' ]
	then
		let CRONSH_ATTEMPT_NUMBER++
		echo -n $CRONSH_ATTEMPT_NUMBER >"$CRONSH_ATTEMPTS_BASEDIR/latest-attempt-num"
		
		if [ $CRONSH_ATTEMPT_NUMBER -gt 1 ]
		then
			delay `random_range $CRONSH_ATTEMPTS_RANDOM_DELAY_ATLEAST $CRONSH_ATTEMPTS_RANDOM_DELAY_ATMOST` random delay before an attempt
			check_signal
			check_timeout
			check_deadline
		fi
		
		CRONSH_ATTEMPT_START_TIMESTAMP_NS=`date +%s.%N`
		CRONSH_ATTEMPT_START_TIMESTAMP=${CRONSH_ATTEMPT_START_TIMESTAMP_NS%.*}
		CRONSH_ATTEMPT_DIRNAME=attempt-$CRONSH_ATTEMPT_NUMBER
		CRONSH_WORKDIR=$CRONSH_ATTEMPTS_BASEDIR/$CRONSH_ATTEMPT_DIRNAME
		CRONSH_WORKDIR_ABS=$PWD/$CRONSH_WORKDIR
		CRONSH_PREVIOUS_SUCCESSFUL_STARTED=`[ -e "$CRONSH_JOBDIR_ABS/$CRONSH_WORKDIR_BASE/most-recent-success/latest-attempt/started" ] && cat "$CRONSH_JOBDIR_ABS/$CRONSH_WORKDIR_BASE/most-recent-success/latest-attempt/started" || echo 0`
		CRONSH_PREVIOUS_SUCCESSFUL_ENDED=`[ -e "$CRONSH_JOBDIR_ABS/latest-successful-instance-end" ] && cat "$CRONSH_JOBDIR_ABS/latest-successful-instance-end" || echo 0`
		
		# Expose attempt-specific variables
		export CRONSH_ATTEMPT_START_TIMESTAMP
		export CRONSH_WORKDIR_ABS
		export CRONSH_PREVIOUS_SUCCESSFUL_STARTED
		#export CRONSH_PREVIOUS_FAILED_STARTED
		#export CRONSH_PREVIOUS_STARTED
		export CRONSH_PREVIOUS_SUCCESSFUL_ENDED
		#export CRONSH_PREVIOUS_FAILED_ENDED
		#export CRONSH_PREVIOUS_ENDED
		
		[ ! -e pre-attempt ] || . pre-attempt
		
		check_signal
		check_timeout
		check_deadline
		
		(
			set -e
			mkdir -p "$CRONSH_WORKDIR"
			exec 1> >(exec tee "$CRONSH_WORKDIR/stdout.txt" >&$stdout_copy)
			exec 2> >(exec tee "$CRONSH_WORKDIR/stderr.txt" >&$stderr_copy)
			
			# Note: CRONSH_ATTEMPT_DIRNAME adds 1 path element, plus "instance/" element is added by get_instance_relative_canonical_dir()
			ln -sfn $(mk_ascending_path "$CRONSH_INSTANCE_CANONICAL_DIR")../../persist "$CRONSH_WORKDIR/persist"
			
			mk_timestamp_file "$CRONSH_WORKDIR/started" "$CRONSH_ATTEMPT_START_TIMESTAMP_NS"
			mk_symlinks_in_various_datetime_formats "$CRONSH_ATTEMPT_DIRNAME" "$CRONSH_ATTEMPTS_BASEDIR" $CRONSH_ATTEMPT_START_TIMESTAMP_NS
			ln -sfn "$CRONSH_ATTEMPT_DIRNAME" "$CRONSH_ATTEMPTS_BASEDIR/latest-attempt"
			ln -sfn "$CRONSH_ATTEMPT_DIRNAME/stdout.txt" "$CRONSH_ATTEMPTS_BASEDIR/stdout-job.txt"
			ln -sfn "$CRONSH_ATTEMPT_DIRNAME/stderr.txt" "$CRONSH_ATTEMPTS_BASEDIR/stderr-job.txt"
			
			if [ $CRONSH_SHELL_MODE = yes ]
			then
				echo "#!$BASH"$'\n'"$CRONSH_EXECUTION_STRING" >"$CRONSH_WORKDIR_ABS/job"
				chmod +x "$CRONSH_WORKDIR_ABS/job"
				CRONSH_JOB_COMMAND=$CRONSH_WORKDIR_ABS/job
			else
				CRONSH_JOB_COMMAND=$CRONSH_JOBDIR_ABS/job
			fi
			export CRONSH_JOB_COMMAND
			
			cd "$CRONSH_WORKDIR"
			
			exec \
			nice -n "$CRONSH_NICE" \
			ionice -c "$CRONSH_IONICE_CLASS" ${CRONSH_IONICE_CLASSDATA:+-n "$CRONSH_IONICE_CLASSDATA"} \
			cronsh_setpgrp \
			bash -c '
				set -e;
				set -u;
				pidfile=$CRONSH_WORKDIR_ABS/pid;
				exec {CRONSH_ATTEMPT_LOCK_FD}>"$pidfile";
				echo -n $$ >&$CRONSH_ATTEMPT_LOCK_FD;
				flock --exclusive --nonblock $CRONSH_ATTEMPT_LOCK_FD;
				exec cronsh_loadenv "$CRONSH_JOBDIR_ABS/env" "$CRONSH_JOB_COMMAND";
			'
		) &
		CRONSH_ATTEMPT_PID=$!
		CRONSH_ATTEMPT_PGID=$CRONSH_ATTEMPT_PID
		
		if [ $CRONSH_JOB_TIMEOUT != 0 -o $CRONSH_JOB_DEADLINE != 0 ]
		then
			# Setup a timeout timer to wait for TIMEOUT or until DEADLINE
			# whichever comes first.
			# Cancels timeout on termination.
			(
				now=`date +%s`
				timeout_sec=$CRONSH_JOB_TIMEOUT
				deadline_sec=$[CRONSH_JOB_DEADLINE == 0 ? 0 : CRONSH_JOB_DEADLINE - now]
				if [ $timeout_sec != 0 -a \( $timeout_sec -lt $deadline_sec -o $deadline_sec = 0 \) ]
				then
					sleep_sec=$timeout_sec
					code=3
					msg="job timed out"
				else
					sleep_sec=$[deadline_sec < 0 ? 0 : deadline_sec]
					code=4
					msg="job deadline reached"
				fi
				trap 'kill $sleep_pid; exit 0' TERM
				sleep $sleep_sec &
				sleep_pid=$!
				wait $sleep_pid
				note "$msg"
				kill -s TERM $CRONSH_ATTEMPT_PID
				exit $code
			) &
			job_timeouter_pid=$!
		else
			job_timeouter_pid=''
		fi
		
		wait_status $CRONSH_ATTEMPT_PID
		CRONSH_LAST_STATUS=$?
		CRONSH_ATTEMPT_PID=''
		
		echo -n $CRONSH_LAST_STATUS >"$CRONSH_WORKDIR/status"
		note "exit status $CRONSH_LAST_STATUS at attempt $CRONSH_ATTEMPT_NUMBER"
		
		# Cancel job timeout timer
		if [ -n "$job_timeouter_pid" ]
		then
			kill -s TERM $job_timeouter_pid 2>/dev/null
			
			# Check if job ended due to the timeout/deadline
			wait $job_timeouter_pid
			case $? in
			3)	CRONSH_STOP_REASON=job-timeout;;
			4)	CRONSH_STOP_REASON=job-deadline;;
			esac
		fi
		
		# Wait for Job's process group to exit.
		if is_pgid_exists $CRONSH_ATTEMPT_PGID
		then
			note "wait Job Progress Group to exit (Ctrl-C to terminate process group)"
			while is_pgid_exists $CRONSH_ATTEMPT_PGID
			do
				sleep 0.5
			done
		fi
		CRONSH_ATTEMPT_PGID=''
		
		check_signal
		
		[ ! -e post-attempt ] || . post-attempt
	else
		note "preconditions are not met"
	fi
	
	if [ "$CRONSH_LAST_STATUS" = 0 ]
	then
		exit_cronsh
	else
		if [ $CRONSH_ATTEMPTS_MAX != 0 -a $CRONSH_ATTEMPT_NUMBER -ge $CRONSH_ATTEMPTS_MAX ]
		then
			CRONSH_STOP_REASON=attempt-limit
			note "reached max attempts ($CRONSH_ATTEMPTS_MAX)"
			exit_cronsh
		fi
		
		if [ "$preconditions_err" != '' -a "$preconditions_err" != 0 ]
		then
			delay $CRONSH_PRECHECK_INTERVAL between precondition checks
		else
			delay $CRONSH_ATTEMPTS_INTERVAL between attempts
		fi
		
		check_signal
		check_timeout
		check_deadline
	fi
done

