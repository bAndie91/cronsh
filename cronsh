#!/bin/bash


# Set variable defaults
CRONSH_NEW_INSTANCE_POLICY=allow-concurrent
CRONSH_MAX_CONCURRENT_INSTANCES=0
CRONSH_INSTANCE_QUEUE_SIZE=0
CRONSH_ATTEMPTS_MAX=1
CRONSH_ATTEMPTS_TIMEOUT=0
CRONSH_ATTEMPTS_DEADLINE_DATESTR=''
CRONSH_ATTEMPTS_INTERVAL=0
CRONSH_JOB_TIMEOUT=0
CRONSH_JOB_DEADLINE_DATESTR=''
CRONSH_INSTANCE_RANDOM_DELAY=(0 0)
CRONSH_ATTEMPTS_RANDOM_DELAY=(0 0)
CRONSH_ENABLE=yes
CRONSH_NICE=19
CRONSH_IONICE_CLASS=idle
CRONSH_IONICE_CLASSDATA=''
CRONSH_CAUGHT_SIGNAL=no
CRONSH_STOP_REASON=''
CRONSH_DISABLE_ON_FAIL=no


# Define subroutines

set -e
for libdir in "$(dirname "`readlink -f "$0"`")" /usr/lib/cronsh /usr/share/cronsh ""
do
	if [ -z "$libdir" ]
	then
		echo "can not source cronsh-common" >&2
		false
	fi
	if [ -e "$libdir/cronsh-common" ]
	then
		. "$libdir/cronsh-common"
		break
	fi
done
set +e

exit_cronsh()
{
	[ ! -e post-instance ] || . post-instance
	
	if [ -n "$CRONSH_LAST_STATUS" -a "$CRONSH_LAST_STATUS" != 0 -a "$CRONSH_DISABLE_ON_FAIL" = yes ]
	then
		note "Disabling Job ..."
		[ -d "$CRONSH_JOBDIR_ABS/config.d" ] || mkdir "$CRONSH_JOBDIR_ABS/config.d"
		{
			echo "# disabled due to a failure in job instance"
			echo "# started at $(date -d @$CRONSH_INSTANCE_START_TIMESTAMP_NS +"$human_date_fmt_min") @$CRONSH_INSTANCE_START_TIMESTAMP_NS"
			echo "# exit code $CRONSH_LAST_STATUS"
			echo "CRONSH_ENABLE=no"
		}>"$CRONSH_JOBDIR_ABS/config.d/99-disable"
	fi
	
	if [ "$CRONSH_LAST_STATUS" != 0 ]
	then
		[ ! -e failure ] || ./failure
	else
		[ ! -e success ] || ./success
	fi
	
	echo -n '' >"$CRONSH_INSTANCE_WORKDIR/end"
	
	exit ${CRONSH_LAST_STATUS:-255}
}
check_timeout()
{
	local now=`date +%s`
	if [ $CRONSH_ATTEMPTS_TIMEOUT != 0 -a $[now - CRONSH_INSTANCE_START_TIMESTAMP] -gt $CRONSH_ATTEMPTS_TIMEOUT ]
	then
		CRONSH_STOP_REASON=attempt-timeout
		note "attempting is timed out at attempt $CRONSH_ATTEMPT_NUMBER ($CRONSH_ATTEMPTS_TIMEOUT sec)"
		exit_cronsh
	fi
}
check_deadline()
{
	local now=`date +%s`
	if [ $CRONSH_ATTEMPTS_DEADLINE != 0 -a $now -gt $CRONSH_ATTEMPTS_DEADLINE ]
	then
		CRONSH_STOP_REASON=attempt-deadline
		note "reached deadline ($(date +"%F %T" -d @$CRONSH_ATTEMPTS_DEADLINE)) at attempt $CRONSH_ATTEMPT_NUMBER"
		exit_cronsh
	fi
}
check_signal()
{
	if [ $CRONSH_CAUGHT_SIGNAL = yes ]
	then
		exit_cronsh
	fi
}
random_range()
{
	echo $[RANDOM % ($2 + 1 - $1) + $1]
}
delay()
{
	local t=$1
	shift
	[ "$t" != 0 ] || return
	note "delay $t: $*"
	sleep "$t" {CRONSH_LOCK_FD}>&- {CRONSH_INSTANCE_LOCK_FD}>&-
}

cronsh_signal()
{
	CRONSH_CAUGHT_SIGNAL=yes
	CRONSH_STOP_REASON=$1
	
	if [ -n "$CRONSH_ATTEMPT_PID" ]
	then
		note "Terminating Job ($CRONSH_ATTEMPT_PID) ..."
		kill -s TERM $CRONSH_ATTEMPT_PID
	else
		if [ -n "$CRONSH_ATTEMPT_PGID" -a $1 = interrupt ]
		then
			note "Terminating Job Process Group ($CRONSH_ATTEMPT_PGID) ..."
			kill -s TERM -- -$CRONSH_ATTEMPT_PGID
		fi
	fi
}



# Read config variables passed by CLI arguments
declare -A config_override
while expr "$1" : '.\+=' >/dev/null
do
	config_override[${1%%=*}]=${1#*=}
	shift
done


# Set shell options
set -e -u
enable kill
shopt -s nullglob
# Set Job directory
CRONSH_JOBDIR=$1
CRONSH_JOBDIR_ABS=`mk_abs_path "$CRONSH_JOBDIR"`
cd "$CRONSH_JOBDIR"
# Open file descriptor to lock later on
exec {CRONSH_LOCK_FD}>>lock
set +e +u


# Load the job's saved configuration
[ ! -e config ] || . config
for cfgfile in config.d/*
do
	. "$cfgfile"
done


# Override config variables with ones passed in CLI args
for var in "${!config_override[@]}"
do
	value=${config_override[$var]}
	eval "$var=\$value"
done
unset var value





if [ $CRONSH_ENABLE != yes ]
then
	die "Job is disabled."
fi


# Acquire Lock
msg_no_lock_ex="Can not acquire exclusive lock"
msg_no_lock_sh="Can not acquire shared lock"
msg_lock_acq="Lock acquired"

case "$CRONSH_NEW_INSTANCE_POLICY" in
allow-concurrent)
	if [ $CRONSH_MAX_CONCURRENT_INSTANCES != 0 ]
	then
		locks=`count_locks_on_file "$CRONSH_JOBDIR_ABS/lock"` || die
		if [ $locks -ge $CRONSH_MAX_CONCURRENT_INSTANCES ]
		then
			die "Too many concurrent Jobs are running ($locks, max: $CRONSH_MAX_CONCURRENT_INSTANCES)"
		fi
	fi
	flock --shared --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_sh"
	;;
deny-new)
	flock --exclusive --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_ex"
	;;
queue-new)
	if [ $CRONSH_INSTANCE_QUEUE_SIZE != 0 ]
	then
		pendlocks=`count_pending_locks_on_file "$CRONSH_JOBDIR_ABS/lock"` || die
		if [ $pendlocks -ge $CRONSH_INSTANCE_QUEUE_SIZE ]
		then
			die "Queue is exhausted ($pendlocks pending items, max: $CRONSH_INSTANCE_QUEUE_SIZE)"
		fi
	fi
	
	trap 'note "Termination requested"; [ -n "$flock_pid" ] && kill $flock_pid; exit 1' INT TERM
	note "Waiting in queue"
	
	flock --exclusive $CRONSH_LOCK_FD &
	flock_pid=$!
	wait_status $flock_pid || die "$msg_no_lock_ex"
	
	note "$msg_lock_acq"
	trap - INT TERM
	;;
stop-old)
	job_terminator_pid=''
	trap 'note "Termination requested"; [ -n "$job_terminator_pid" ] && kill $job_terminator_pid; exit 1' INT TERM
	
	CRONSH_STOPOLD_LOCKFILE=`get_stopold_lockfile_name`
	exec {CRONSH_STOPOLD_LOCK_FD}>>"$CRONSH_STOPOLD_LOCKFILE" || die "Failed to open lockfile: $CRONSH_STOPOLD_LOCKFILE"
	
	if ! flock --exclusive --nonblock $CRONSH_STOPOLD_LOCK_FD
	then
		# stop other job instance which in in "lock acquisition" phase just like us now
		note "Stopping old Job Instnce in initialization phase"
		kill `cat "$CRONSH_STOPOLD_LOCKFILE"`
	fi
	
	note "Grabbing auxiliary lock"
	flock --exclusive $CRONSH_STOPOLD_LOCK_FD || die "$msg_no_lock_ex"
	echo $$ >"$CRONSH_STOPOLD_LOCKFILE"
	
	note "Stopping old running Job Instnces if any"
	cronshctl stop "$CRONSH_JOBDIR_ABS" &
	job_terminator_pid=$!
	
	wait_status $job_terminator_pid
	
	flock --exclusive --nonblock $CRONSH_LOCK_FD || die "$msg_no_lock_ex"
	note "$msg_lock_acq"
	
	flock --unlock $CRONSH_STOPOLD_LOCK_FD
	trap - INT TERM
	;;
*)
	die "Bad config: \$CRONSH_NEW_INSTANCE_POLICY=$CRONSH_NEW_INSTANCE_POLICY"
	;;
esac


# Generate instance unique variables
CRONSH_INSTANCE_START_TIMESTAMP_NS=`date +%s.%N`
CRONSH_INSTANCE_START_TIMESTAMP=${CRONSH_INSTANCE_START_TIMESTAMP_NS%.*}
CRONSH_WORKDIR_BASE=work
CRONSH_ATTEMPTS_BASEDIR=$CRONSH_WORKDIR_BASE/$CRONSH_INSTANCE_START_TIMESTAMP_NS
CRONSH_INSTANCE_WORKDIR=$CRONSH_ATTEMPTS_BASEDIR

# Save Job Instance's PID and setup logging
set -e
mkdir -p "$CRONSH_INSTANCE_WORKDIR"
echo -n $$ >"$CRONSH_INSTANCE_WORKDIR/pid"
exec {CRONSH_INSTANCE_LOCK_FD}>>"$CRONSH_INSTANCE_WORKDIR/pid"
flock --exclusive --nonblock $CRONSH_INSTANCE_LOCK_FD
exec {stdout_copy}>&1
exec {stderr_copy}>&2
exec 1> >(exec tee "$CRONSH_INSTANCE_WORKDIR/stdout.txt" >&1)
exec 2> >(exec tee "$CRONSH_INSTANCE_WORKDIR/stderr.txt" >&2)
set +e


# Set other computed variables
CRONSH_ATTEMPTS_DEADLINE=0
[ -z "$CRONSH_ATTEMPTS_DEADLINE_DATESTR" ] || CRONSH_ATTEMPTS_DEADLINE=`date +%s -d "$CRONSH_ATTEMPTS_DEADLINE_DATESTR"`
CRONSH_LAST_STATUS=''
CRONSH_ATTEMPTS_TIMEOUT=`to_sec $CRONSH_ATTEMPTS_TIMEOUT`
CRONSH_ATTEMPTS_INTERVAL=`to_nsec $CRONSH_ATTEMPTS_INTERVAL`
CRONSH_ATTEMPT_NUMBER=0
CRONSH_JOB_DEADLINE=0
[ -z "$CRONSH_JOB_DEADLINE_DATESTR" ] || CRONSH_JOB_DEADLINE=`date +%s -d "$CRONSH_JOB_DEADLINE_DATESTR"`
CRONSH_JOB_TIMEOUT=`to_sec $CRONSH_JOB_TIMEOUT`
if [ -n "${CRONSH_INSTANCE_RANDOM_DELAY[1]}" ]
then
	CRONSH_INSTANCE_RANDOM_DELAY[0]=`to_sec ${CRONSH_INSTANCE_RANDOM_DELAY[0]}`
	CRONSH_INSTANCE_RANDOM_DELAY[1]=`to_sec ${CRONSH_INSTANCE_RANDOM_DELAY[1]}`
else
	CRONSH_INSTANCE_RANDOM_DELAY=(0 `to_sec "$CRONSH_INSTANCE_RANDOM_DELAY"`)
fi
if [ -n "${CRONSH_ATTEMPTS_RANDOM_DELAY[1]}" ]
then
	CRONSH_ATTEMPTS_RANDOM_DELAY[0]=`to_sec ${CRONSH_ATTEMPTS_RANDOM_DELAY[0]}`
	CRONSH_ATTEMPTS_RANDOM_DELAY[1]=`to_sec ${CRONSH_ATTEMPTS_RANDOM_DELAY[1]}`
else
	CRONSH_ATTEMPTS_RANDOM_DELAY=(0 `to_sec "$CRONSH_ATTEMPTS_RANDOM_DELAY"`)
fi
if ! [ "$CRONSH_IONICE_CLASS" -ge 0 ] 2>/dev/null
then
	case "$CRONSH_IONICE_CLASS" in
	none) CRONSH_IONICE_CLASS=0;;
	realtime) CRONSH_IONICE_CLASS=1;;
	best-effort) CRONSH_IONICE_CLASS=2;;
	idle) CRONSH_IONICE_CLASS=3;;
	esac
fi


# Expose instance specific variables
export CRONSH_JOBDIR_ABS
export CRONSH_INSTANCE_START_TIMESTAMP
export CRONSH_ATTEMPT_NUMBER
export CRONSH_LAST_STATUS


# Setup signal handlers
trap 'cronsh_signal terminate' TERM
trap 'cronsh_signal interrupt' INT


# Display config variables
#set | grep -E ^CRONSH_ | sort | sed -e 's/^/env: /' >&2


# Start the Job

delay `random_range ${CRONSH_INSTANCE_RANDOM_DELAY[@]}` random delay before starting job

[ ! -e pre-instance ] || . pre-instance


while true
do
	let CRONSH_ATTEMPT_NUMBER++
	CRONSH_ATTEMPT_START_TIMESTAMP_NS=`date +%s.%N`
	CRONSH_ATTEMPT_START_TIMESTAMP=${CRONSH_ATTEMPT_START_TIMESTAMP_NS%.*}
	CRONSH_ATTEMPT_DIRNAME=attempt-$CRONSH_ATTEMPT_NUMBER
	CRONSH_WORKDIR=$CRONSH_ATTEMPTS_BASEDIR/$CRONSH_ATTEMPT_DIRNAME
	CRONSH_WORKDIR_ABS=$PWD/$CRONSH_WORKDIR
	
	# Expose attempt specific variables
	export CRONSH_ATTEMPT_START_TIMESTAMP
	export CRONSH_WORKDIR_ABS
	
	run-parts --exit-on-error "$CRONSH_JOBDIR_ABS"/condition
	preconditions_err=$?
	
	check_signal
	
	if [ $preconditions_err = 0 ]
	then
		if [ $CRONSH_ATTEMPT_NUMBER -gt 1 ]
		then
			delay `random_range ${CRONSH_ATTEMPTS_RANDOM_DELAY[@]}` random delay before an attempt
			check_timeout
			check_deadline
		fi
		
		[ ! -e pre-attempt ] || . pre-attempt
		
		(
			set -e
			mkdir -p "$CRONSH_WORKDIR"
			
			exec 1> >(exec tee "$CRONSH_WORKDIR/stdout.txt" >&$stdout_copy)
			exec 2> >(exec tee "$CRONSH_WORKDIR/stderr.txt" >&$stderr_copy)
			
			for datefmt in "$human_date_fmt_nsec" "$human_date_fmt_sec" "$human_date_fmt_min"
			do
				ln -sfn "$CRONSH_INSTANCE_START_TIMESTAMP_NS" "$CRONSH_WORKDIR_BASE/$(date -d @$CRONSH_INSTANCE_START_TIMESTAMP_NS +"$datefmt")"
				ln -sfn "$CRONSH_ATTEMPT_DIRNAME" "$CRONSH_ATTEMPTS_BASEDIR/$(date -d @$CRONSH_ATTEMPT_START_TIMESTAMP_NS +"$datefmt")"
			done
			
			cd "$CRONSH_WORKDIR"
			
			renice -n "$CRONSH_NICE" -p $$ >/dev/null
			ionice -c "$CRONSH_IONICE_CLASS" ${CRONSH_IONICE_CLASSDATA:+-n "$CRONSH_IONICE_CLASSDATA"} -p $$
			
			exec cronsh_setpgrp bash -c '
				set -e;
				pidfile=$CRONSH_WORKDIR_ABS/pid;
				exec {CRONSH_ATTEMPT_LOCK_FD}>"$pidfile";
				echo -n $$ >&$CRONSH_ATTEMPT_LOCK_FD;
				flock --exclusive --nonblock $CRONSH_ATTEMPT_LOCK_FD;
				exec cronsh_loadenv "$CRONSH_JOBDIR_ABS/env" "$CRONSH_JOBDIR_ABS/job";
			'
		) &
		CRONSH_ATTEMPT_PID=$!
		CRONSH_ATTEMPT_PGID=$CRONSH_ATTEMPT_PID
		
		if [ $CRONSH_JOB_TIMEOUT != 0 -o $CRONSH_JOB_DEADLINE != 0 ]
		then
			# Setup a timeout timer to wait for TIMEOUT or until DEADLINE
			# whichever comes first.
			# Cancels timeout on termination.
			(
				now=`date +%s`
				timeout_sec=$CRONSH_JOB_TIMEOUT
				deadline_sec=$[CRONSH_JOB_DEADLINE == 0 ? 0 : CRONSH_JOB_DEADLINE - now]
				if [ $timeout_sec != 0 -a \( $timeout_sec -lt $deadline_sec -o $deadline_sec = 0 \) ]
				then
					sleep_sec=$timeout_sec
					code=3
					msg="job timed out"
				else
					sleep_sec=$[deadline_sec < 0 ? 0 : deadline_sec]
					code=4
					msg="job deadline reached"
				fi
				trap 'kill $sleep_pid; exit 0' TERM
				sleep $sleep_sec &
				sleep_pid=$!
				wait $sleep_pid
				note "$msg"
				kill -s TERM $CRONSH_ATTEMPT_PID
				exit $code
			) &
			job_timeouter_pid=$!
		else
			job_timeouter_pid=''
		fi
		
		wait_status $CRONSH_ATTEMPT_PID
		CRONSH_LAST_STATUS=$?
		CRONSH_ATTEMPT_PID=''
		
		echo -n $CRONSH_LAST_STATUS >"$CRONSH_WORKDIR/status"
		note "exit status $CRONSH_LAST_STATUS at attempt $CRONSH_ATTEMPT_NUMBER"
		
		# Cancel job timeout timer
		if [ -n "$job_timeouter_pid" ]
		then
			kill -s TERM $job_timeouter_pid 2>/dev/null
			
			# Check if job ended due to the timeout/deadline
			wait $job_timeouter_pid
			case $? in
			3)	CRONSH_STOP_REASON=job-timeout;;
			4)	CRONSH_STOP_REASON=job-deadline;;
			esac
		fi
		
		# Wait for Job's process group to exit.
		if is_pgid_exists $CRONSH_ATTEMPT_PGID
		then
			note "wait Job Progress Group to exit (Ctrl-C to terminate process group)"
			while is_pgid_exists $CRONSH_ATTEMPT_PGID
			do
				sleep 0.5
			done
		fi
		CRONSH_ATTEMPT_PGID=''
	else
		note "preconditions are not met"
	fi
	
	check_signal
	
	if [ "$CRONSH_LAST_STATUS" = 0 ]
	then
		exit_cronsh
	else
		if [ $CRONSH_ATTEMPTS_MAX != 0 -a $CRONSH_ATTEMPT_NUMBER -ge $CRONSH_ATTEMPTS_MAX ]
		then
			CRONSH_STOP_REASON=attempt-limit
			note "reached max attempts ($CRONSH_ATTEMPTS_MAX)"
			exit_cronsh
		fi
		check_timeout
		check_deadline
		
		[ ! -e post-attempt ] || . post-attempt
		
		delay $CRONSH_ATTEMPTS_INTERVAL between attempts
		
		check_signal
		check_timeout
		check_deadline
	fi
done

# TODO
# CRONSH_SHOULD_RUN time spec
# verbose/debug mode
# detect config change and reload
	
