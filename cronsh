#!/bin/bash

CRONSH_ALLOW_MULTIPLE_INSTANCES=yes
#TODO#CRONSH_HARD_DEADLINE_DATESTR=''
CRONSH_ATTEMPTS_MAX=1
CRONSH_ATTEMPTS_TIMEOUT=0
CRONSH_ATTEMPTS_DEADLINE_DATESTR=''
CRONSH_ATTEMPTS_INTERVAL=0

set -e -u
CRONSH_JOBDIR=$1
if [ "${CRONSH_JOBDIR:0:1}" = / ]
then
	CRONSH_JOBDIR_ABS=$CRONSH_JOBDIR
else
	CRONSH_JOBDIR_ABS=$PWD/$CRONSH_JOBDIR
fi
cd "$CRONSH_JOBDIR"
exec 9>>lock
set +e +u


[ ! -e config ] || . config


exit_failure()
{
	[ ! -e post-instance ] || . post-instance
	exit $CRONSH_LAST_STATUS
}
exit_successfull()
{
	exit 0
}
die()
{
	note "$@"
	exit 255
}
note()
{
	echo "cronsh: <$CRONSH_JOBDIR> $*" >&2
}
to_sec()
{
	to_datefmt %s "$@"
}
to_nsec()
{
	to_datefmt %s.%N "$@"
}
to_datefmt()
{
	local fmt=$1
	shift
	if expr "$*" : '^[0-9.]\+$' >/dev/null
	then
		echo "$*"
	else
		date +"$fmt" -d "1970-01-01 00:00 +0000 $*"
	fi
}
check_timeout()
{
	if [ $CRONSH_ATTEMPTS_TIMEOUT != 0 -a $[now - CRONSH_INSTANCE_START_TIMESTAMP] -gt $CRONSH_ATTEMPTS_TIMEOUT ]
	then
		note "instance $CRONSH_INSTANCE_START_TIMESTAMP_NS, attempt $CRONSH_ATTEMPT_NUMBER, attempts timed out ($CRONSH_ATTEMPTS_TIMEOUT sec)"
		exit_failure
	fi
}
check_deadline()
{
	if [ $CRONSH_ATTEMPTS_DEADLINE != 0 -a $now -gt $CRONSH_ATTEMPTS_DEADLINE ]
	then
		note "instance $CRONSH_INSTANCE_START_TIMESTAMP_NS, attempt $CRONSH_ATTEMPT_NUMBER, reached deadline ($(date +"%F %T" -d @$CRONSH_ATTEMPTS_DEADLINE))"
		exit_failure
	fi
}
human_date_fmt="%Y-%m-%d_%H:%M:%S.%N"


if [ $CRONSH_ALLOW_MULTIPLE_INSTANCES = yes ]
then
	flock --shared --nonblock 9 || die "Can not acquire shared lock"
else
	flock --exclusive --nonblock 9 || die "Can not acquire exclusive lock"
fi


CRONSH_INSTANCE_START_TIMESTAMP_NS=`date +%s.%N`
CRONSH_INSTANCE_START_TIMESTAMP=${CRONSH_INSTANCE_START_TIMESTAMP_NS%.*}
CRONSH_ATTEMPTS_DEADLINE=0
[ -z "$CRONSH_ATTEMPTS_DEADLINE_DATESTR" ] || CRONSH_ATTEMPTS_DEADLINE=`date +%s -d "$CRONSH_ATTEMPTS_DEADLINE_DATESTR"`
CRONSH_LAST_STATUS=''
CRONSH_ATTEMPTS_TIMEOUT=`to_sec $CRONSH_ATTEMPTS_TIMEOUT`
CRONSH_ATTEMPTS_INTERVAL=`to_nsec $CRONSH_ATTEMPTS_INTERVAL`
CRONSH_ATTEMPT_NUMBER=0

# display config variables
set | grep -E ^CRONSH_ | sort >&2

export CRONSH_JOBDIR_ABS
export CRONSH_INSTANCE_START_TIMESTAMP
export CRONSH_ATTEMPT_NUMBER
export CRONSH_LAST_STATUS


[ ! -e pre-instance ] || . pre-instance


while true
do
	let CRONSH_ATTEMPT_NUMBER++
	CRONSH_ATTEMPT_START_TIMESTAMP_NS=`date +%s.%N`
	CRONSH_ATTEMPT_START_TIMESTAMP=${CRONSH_ATTEMPT_START_TIMESTAMP_NS%.*}
	CRONSH_WORKDIR=instance/$CRONSH_INSTANCE_START_TIMESTAMP_NS/attempt-$CRONSH_ATTEMPT_NUMBER
	CRONSH_WORKDIR_ABS=$PWD/instance/$CRONSH_INSTANCE_START_TIMESTAMP_NS/attempt-$CRONSH_ATTEMPT_NUMBER
	
	export CRONSH_ATTEMPT_START_TIMESTAMP
	export CRONSH_WORKDIR
	export CRONSH_WORKDIR_ABS
	
	[ ! -e pre-attempt ] || . pre-attempt
	
	(
		set -e
		mkdir -p "$CRONSH_WORKDIR"
		
		exec 1>>"$CRONSH_WORKDIR/stdout.txt"
		exec 2>>"$CRONSH_WORKDIR/stderr.txt"
		
		ln -sfn "$CRONSH_INSTANCE_START_TIMESTAMP_NS" "instance/$(date -d @$CRONSH_INSTANCE_START_TIMESTAMP_NS +"$human_date_fmt")"
		ln -sfn "attempt-$CRONSH_ATTEMPT_NUMBER" "instance/$CRONSH_INSTANCE_START_TIMESTAMP_NS/$(date -d @$CRONSH_ATTEMPT_START_TIMESTAMP_NS +"$human_date_fmt")"
		
		cd "$CRONSH_WORKDIR"
		$CRONSH_JOBDIR_ABS/job
	)
	
	CRONSH_LAST_STATUS=$?
	
	note instance "$CRONSH_INSTANCE_START_TIMESTAMP_NS, attempt $CRONSH_ATTEMPT_NUMBER, exit status $CRONSH_LAST_STATUS"
	
	now=`date +%s`
	
	if [ $CRONSH_LAST_STATUS = 0 ]
	then
		exit_successfull
	else
		if [ $CRONSH_ATTEMPTS_MAX != 0 -a $CRONSH_ATTEMPT_NUMBER -ge $CRONSH_ATTEMPTS_MAX ]
		then
			note "instance $CRONSH_INSTANCE_START_TIMESTAMP_NS, attempt $CRONSH_ATTEMPT_NUMBER, reached max attempts $CRONSH_ATTEMPTS_MAX"
			exit_failure
		fi
		check_timeout
		check_deadline
		
		[ ! -e post-attempt ] || . post-attempt
		
		sleep $CRONSH_ATTEMPTS_INTERVAL
		
		now=`date +%s`
		
		check_timeout
		check_deadline
	fi
done
