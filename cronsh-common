#!/bin/bash

die()
{
	note "$@"
	exit 255
}
note()
{
	[ -z "$*" ] || echo "cronsh: <$CRONSH_JOBDIR> $*" >&2
}
to_sec()
{
	to_datefmt %s "$@"
}
to_nsec()
{
	to_datefmt %s.%N "$@"
}
to_datefmt()
{
	local fmt=$1
	shift
	if expr "$*" : '^[0-9.]\+$' >/dev/null
	then
		echo "$*"
	else
		date +"$fmt" -d "1970-01-01 00:00 +0000 $*"
	fi
}
is_locked()
{
	[ -e "$1" ] && ! flock --nonblock --shared "$1" true
}
is_pgid_exists()
{
	kill -n 0 -- -$1 2>/dev/null
}
process_exists()
{
	[ -n "$1" -a -d /proc/"$1" ]
}
wait_status()
{
	local pid=$1
	local status
	while process_exists "$pid"
	do
		wait "$pid"
		status=$?
	done
	return $status
}
get_parent_pid()
{
	ps o ppid= -p "$1" | tr -d " "
}

list_all_locks_on_inode()
{
	local inode=$1
	# FIXME
	# I ignore major and minor device num here
	# because they do not add up for me:
	# eg. stat(1) says 0x1b for a file but 
	# /proc/locks has "00:11:..." entry
	grep ":$inode " /proc/locks
}
count_locks_on_file()
{
	count_locks_on_inode `stat -c %i "$1"`
}
count_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep -v '[-]>' -c
	return 0
}
count_pending_locks_on_file()
{
	count_pending_locks_on_inode `stat -c %i "$1"`
}
count_pending_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep '[-]>' -c
	return 0
}
list_pending_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep '[-]>'
	return 0
}
list_pending_locks_on_file()
{
	list_pending_locks_on_inode `stat -c %i "$1"`
}
get_pids_from_locks_list()
{
	awk '{if(/->/) {print $6} else {print $5}}'
}

get_stopold_lockfile_name()
{
	if [ -z "$CRONSH_JOBDIR_ABS" ]; then return 1; fi
	echo "$CRONSH_JOBDIR_ABS/stop-old.lock"
}
mk_abs_path()
{
	if [ "${1:0:1}" = / ]
	then
		echo "$1"
	else
		echo "$PWD/$1"
	fi
}

mk_timestamp_file()
{
	local file=$1
	local timestamp=$2
	if [ -z "$timestamp" ]
	then
		timestamp=`date +%s.%N`
	fi
	echo -n "$timestamp" >"$file"
}
write_instance_history()
{
	echo "$CRONSH_INSTANCE_START_TIMESTAMP_NS	$CRONSH_LAST_STATUS" >>"$CRONSH_JOBDIR_ABS/status-history"
	mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	if [ "$CRONSH_LAST_STATUS" = 0 ]
	then
		mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-successful-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	else
		mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-unsuccessful-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	fi
}
get_timestamp_sec_or_zero()
{
	local ts=`cat "$1" 2>/dev/null`
	if [ -z "$ts" ]
	then
		echo 0
	else
		echo ${ts%.*}
	fi
}



human_date_fmt_nsec="%Y-%m-%d_%H:%M:%S.%N"
human_date_fmt_sec="%Y-%m-%d_%H:%M:%S"
human_date_fmt_min="%Y-%m-%d_%H:%M"
human_date_fmt_ls="%Y-%m-%d %H:%M"
human_date_fmt_ls_width=16
