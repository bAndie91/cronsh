#!/bin/bash

die()
{
	note "$@"
	exit 255
}
note()
{
	if [ -n "$*" ]
	then
		local logstr=$CRONSH_LOG_TEMPLATE
		local datetime=(`date +"%s %F %T"`)
		local elapsed
		if [ "${CRONSH_LOG_LAST_MESSAGE_TIMESTAMP+x}" ]
		then elapsed=$[${datetime[0]} - $CRONSH_LOG_LAST_MESSAGE_TIMESTAMP]
		else elapsed=0
		fi
		CRONSH_LOG_LAST_MESSAGE_TIMESTAMP=${datetime[0]}
		logstr=${logstr//\{TIMESTAMP\}/${datetime[0]}}
		logstr=${logstr//\{DATE\}/${datetime[1]}}
		logstr=${logstr//\{TIME\}/${datetime[2]}}
		logstr=${logstr//\{ELAPSED\}/$elapsed}
		logstr=${logstr//\{JOBDIR\}/$CRONSH_JOBDIR}
		logstr=${logstr//\{MESSAGE\}/$*}
		echo "$logstr" >&2
	fi
}
to_sec()
{
	to_datefmt %s "$@"
}
to_nsec()
{
	to_datefmt %s.%N "$@"
}
to_datefmt()
{
	local fmt=$1
	shift
	if expr "$*" : '^[0-9.]\+$' >/dev/null
	then
		echo "$*"
	else
		date +"$fmt" -d "1970-01-01 00:00 +0000 $*"
	fi
}
is_locked()
{
	[ -e "$1" ] && ! flock --nonblock --shared "$1" true
}
is_pgid_exists()
{
	kill -n 0 -- -$1 2>/dev/null
}
process_exists()
{
	[ -n "$1" -a -d /proc/"$1" ]
}
wait_status()
{
	local pid=$1
	local status
	while process_exists "$pid"
	do
		wait "$pid"
		status=$?
	done
	return $status
}
get_parent_pid()
{
	ps o ppid= -p "$1" | tr -d " "
}

list_all_locks_on_inode()
{
	local inode=$1
	# FIXME
	# I ignore major and minor device num here
	# because they do not add up for me:
	# eg. stat(1) says 0x1b for a file but 
	# /proc/locks has "00:11:..." entry
	grep --text ":$inode " /proc/locks
}
count_locks_on_file()
{
	count_locks_on_inode `stat -c %i "$1"`
}
count_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep --text -v '[-]>' -c
	return 0
}
count_pending_locks_on_file()
{
	count_pending_locks_on_inode `stat -c %i "$1"`
}
count_pending_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep --text '[-]>' -c
	return 0
}
list_pending_locks_on_inode()
{
	local inode=$1
	if [ -z "$inode" ]; then return 1; fi
	list_all_locks_on_inode "$inode" | grep --text '[-]>'
	return 0
}
list_pending_locks_on_file()
{
	list_pending_locks_on_inode `stat -c %i "$1"`
}
get_pids_from_locks_list()
{
	awk '{if(/->/) {print $6} else {print $5}}'
}

get_stopold_lockfile_name()
{
	if [ -z "$CRONSH_JOBDIR_ABS" ]; then return 1; fi
	echo "$CRONSH_JOBDIR_ABS/stop-old.lock"
}
mk_abs_path()
{
	if [ "${1:0:1}" = / ]
	then
		echo "$1"
	else
		echo "$PWD/$1"
	fi
}

mk_ascending_path()
{
	local normalized_path=$1
	local slashes=${normalized_path//[!\/]/}
	local i
	for i in `seq 1 ${#slashes}`
	do
		echo -n '../'
	done
}

get_instance_relative_canonical_dir()
{
	local timestamp=$1
	date +"instance/$CRONSH_INSTANCE_CANONICAL_DIR_TEMPLATE" -d @$timestamp
}

register_instance_start()
{
	local instance_id=$1
	local instance_dir=$2
	echo "$instance_id $instance_dir" >>"$CRONSH_JOBDIR_ABS/instances-started"
}

gather_all_instance_ids()
{
	local jobdir=$1
	cut -d' ' -f1 "$jobdir/instances-started"
}

gather_non_terminated_instance_ids()
{
	local jobdir=$1
	join -j1 -v1 <(gather_all_instance_ids "$jobdir") <(cut -f1 -d' ' "$jobdir/status-history" | sort)
}

get_terminated_instance_status()
{
	local jobdir=$1
	local instance_id=$2
	grep "^$instance_id " "$jobdir/status-history" | cut -f2 -d' '
}

gather_running_instance_ids()
{
	local jobdir=$1
	local idir
	for jiid in `gather_non_terminated_instance_ids "$jobdir"`
	do
		idir=$jobdir/$CRONSH_WORKDIR_BASE/`get_instance_dir "$jobdir" "$jiid"`
		if is_locked "$idir/pid"
		then
			echo "$jiid"
		fi
	done
}

get_instance_dir()
{
	local jobdir=$1
	local instanceid=$2
	grep --text "^$instanceid " "$jobdir/instances-started" | cut -d' ' -f2-
}

get_fq_instance_dir()
{
	local jobdir=$1
	local rel_dir=`get_instance_dir "$@"`
	if [ -n "$rel_dir" ]
	then
		echo -n "$jobdir/$CRONSH_WORKDIR_BASE/$rel_dir"
	fi
}

get_instance_start_nsec()
{
	# instance id does equal to nanosec timestamp of instance start
	echo "$1"
}

mk_timestamp_file()
{
	local file=$1
	local timestamp=$2
	if [ -z "$timestamp" ]
	then
		timestamp=`date +%s.%N`
	fi
	echo -n "$timestamp" >"$file"
}
write_instance_history()
{
	echo "$CRONSH_INSTANCE_START_TIMESTAMP_NS $CRONSH_LAST_STATUS" >>"$CRONSH_JOBDIR_ABS/status-history"
	mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	if [ "$CRONSH_LAST_STATUS" = 0 ]
	then
		mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-successful-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	else
		mk_timestamp_file "$CRONSH_JOBDIR_ABS/latest-unsuccessful-instance-end" "$CRONSH_INSTANCE_END_TIMESTAMP_NS"
	fi
}
get_timestamp_sec_or_zero()
{
	local ts=`cat "$1" 2>/dev/null`
	if [ -z "$ts" ]
	then
		echo 0
	else
		echo ${ts%.*}
	fi
}
mk_symlinks_in_various_datetime_formats()
{
	local datefmt
	local target=$1
	local basedir=$2
	local timestamp=$3
	for datefmt in "$human_date_fmt_nsec" "$human_date_fmt_sec" "$human_date_fmt_min"
	do
		ln -sfn "$target" "$basedir/$(date -d @$timestamp +"$datefmt")"
	done
}

cronsh_set_variable_defaults()
{
CRONSH_NEW_INSTANCE_POLICY=allow-concurrent
CRONSH_MAX_CONCURRENT_INSTANCES=0
CRONSH_INSTANCE_QUEUE_SIZE=0
CRONSH_ATTEMPTS_MAX=1
CRONSH_ATTEMPTS_TIMEOUT=0
CRONSH_ATTEMPTS_DEADLINE_DATESTR=''
CRONSH_ATTEMPTS_INTERVAL=0
CRONSH_PRECHECK_INTERVAL=5sec
CRONSH_JOB_TIMEOUT=0
CRONSH_JOB_DEADLINE_DATESTR=''
CRONSH_INSTANCE_RANDOM_DELAY_ATLEAST=0
CRONSH_INSTANCE_RANDOM_DELAY_ATMOST=0
CRONSH_ATTEMPTS_RANDOM_DELAY_ATLEAST=0
CRONSH_ATTEMPTS_RANDOM_DELAY_ATMOST=0
CRONSH_ENABLE=yes
CRONSH_NICE=19
CRONSH_IONICE_CLASS=idle
CRONSH_IONICE_CLASSDATA=''
CRONSH_CAUGHT_SIGNAL=no
CRONSH_STOP_REASON=''
CRONSH_DISABLE_ON_FAIL=no
CRONSH_MIN_COOLDOWN=0
CRONSH_MIN_COOLDOWN_SUCCESS=0
CRONSH_MIN_COOLDOWN_FAILED=0
CRONSH_KEEPT=prefer
CRONSH_READ_CONFIG=yes
CRONSH_SHELL_MODE=no
CRONSH_EXECUTION_STRING=''
CRONSH_LOG_TEMPLATE='cronsh: {DATE} {TIME} [{JOBDIR}] {MESSAGE}'
CRONSH_SHELL=$BASH
CRONSH_JOBDIR=''
}

# variables not exposed directly to user
human_date_fmt_nsec="%Y-%m-%d_%H:%M:%S.%N"
human_date_fmt_sec="%Y-%m-%d_%H:%M:%S"
human_date_fmt_min="%Y-%m-%d_%H:%M"
human_date_fmt_ls="%Y-%m-%d %H:%M"
human_date_fmt_ls_width=16

cronsh_varnameprefix=CRONSH_

CRONSH_WORKDIR_BASE=work
readonly CRONSH_WORKDIR_BASE

# variables user can configure
CRONSH_INSTANCE_CANONICAL_DIR_TEMPLATE="%Y-%m/%Y-%m-%d/%Y-%m-%d_%H/%Y-%m-%d_%H%M/%s.%N"
