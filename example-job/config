# This file is basically a script sourced in by bash.
# Technically you can put any complex logic here, but 
# please keep only simple "variable=value" statements here.
# Put your custom initialization login in 'pre-instance' file.

# CRONSH_NEW_INSTANCE_POLICY
# options: allow-concurrent, deny-new, queue-new, stop-old
CRONSH_NEW_INSTANCE_POLICY=allow-concurrent

# CRONSH_MAX_CONCURRENT_INSTANCES
# limit of concurrently started Job Instances (makes sense only with CRONSH_NEW_INSTANCE_POLICY=allow-concurrent)
# zero means no limit
CRONSH_MAX_CONCURRENT_INSTANCES=0

# CRONSH_INSTANCE_QUEUE_SIZE
# how many Job Instances can wait in the queue (makes sense only with CRONSH_NEW_INSTANCE_POLICY=queue-new)
# zero means unlimited queue
CRONSH_INSTANCE_QUEUE_SIZE=0

# CRONSH_INSTANCE_CANONICAL_DIR_TEMPLATE
# strftime(3)-style string to construct path for individual instance workdir
# it'll be created in <JOBDIR>/work/instance/
# it's a good idea to have less deep path for jobs running rather rare, and deeper path for frequently running jobs
# please keep at least '%s.%N' in it since it defines an instance more or less uniquely
# please avoid new-line/carriage-return chars
CRONSH_INSTANCE_CANONICAL_DIR_TEMPLATE="%Y-%m/%Y-%m-%d/%Y-%m-%d_%H/%Y-%m-%d_%H%M/%s.%N"

# CRONSH_MIN_REST_INTERVAL CRONSH_MIN_REST_INTERVAL_SUCCESS CRONSH_MIN_REST_INTERVAL_FAILED
# disallow to start for this much time after last (successful, unsuccessful, either) job instance end
# zero means no restriction
CRONSH_MIN_REST_INTERVAL=0
CRONSH_MIN_REST_INTERVAL_SUCCESS=0
CRONSH_MIN_REST_INTERVAL_FAILED=0

# CRONSH_ENABLE
# options: yes, no
# when set to 'no' no new jobs will start
CRONSH_ENABLE=yes

# CRONSH_DISABLE_ON_FAIL
# options: yes, no
# when set to 'yes' if the overall job failed then cronsh will set CRONSH_ENABLE=no in config file
CRONSH_DISABLE_ON_FAIL=no

# CRONSH_ATTEMPTS_TIMEOUT
# stop trying to run the job after this amount of time
# example: CRONSH_ATTEMPTS_TIMEOUT=1hour
# zero means no timeout
CRONSH_ATTEMPTS_TIMEOUT=0

# CRONSH_ATTEMPTS_DEADLINE_DATESTR
# stop trying to run the job after this time (see date(1) '-d' option for valid expressions)
# example: CRONSH_ATTEMPTS_DEADLINE_DATESTR="today 06:00"
CRONSH_ATTEMPTS_DEADLINE_DATESTR=''

# CRONSH_ATTEMPTS_INTERVAL
# wait this much time between attempts
# example: CRONSH_ATTEMPTS_INTERVAL=5min
CRONSH_ATTEMPTS_INTERVAL=0

# CRONSH_ATTEMPTS_MAX
# try to run the job at most this many times
# zero means no limit
CRONSH_ATTEMPTS_MAX=1

# CRONSH_INSTANCE_RANDOM_DELAY
# bash array
# wait random amount of time before attempt to start the job before 'pre-instance' stage
# you may specify an upper limit of randomness or a range
# example: CRONSH_INSTANCE_RANDOM_DELAY=5min
# example: CRONSH_INSTANCE_RANDOM_DELAY=(5sec 1min)
CRONSH_INSTANCE_RANDOM_DELAY=(0 0)

# CRONSH_ATTEMPTS_RANDOM_DELAY
# bash array
# wait random amount of time between each attempts before 'pre-attempt' stage
# you may specify an upper limit of randomness or a range
# example: CRONSH_ATTEMPTS_RANDOM_DELAY=5sec
# example: CRONSH_ATTEMPTS_RANDOM_DELAY=(1sec 3sec)
CRONSH_ATTEMPTS_RANDOM_DELAY=(0 0)

# CRONSH_JOB_TIMEOUT
# once the actual job started, terminate after this much time
# zero means never
CRONSH_JOB_TIMEOUT=0

# CRONSH_JOB_DEADLINE_DATESTR
# once the actual job started, terminate on this time (see date(1) '-d' option for valid expressions)
CRONSH_JOB_DEADLINE_DATESTR=''

# CRONSH_NICE, CRONSH_IONICE_CLASS, CRONSH_IONICE_CLASSDATA
# see nice(1), ionice(1)
CRONSH_NICE=19
CRONSH_IONICE_CLASS=idle
CRONSH_IONICE_CLASSDATA=''

# CRONSH_KEEPT
# integration with keept [https://github.com/domo141/keept]
# options: maybe, must, no
#   maybe - start job in keept if it's available
#   must - start job in keept or fail
#   no - don't start keept
# using keept allows you to bring cronsh job to the foreground on any terminal
# useful when running jobs in the background
CRONSH_KEEPT=maybe
